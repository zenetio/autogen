"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4255],{3905:(t,e,r)=>{r.d(e,{Zo:()=>c,kt:()=>g});var n=r(7294);function a(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function i(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function l(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?i(Object(r),!0).forEach((function(e){a(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function o(t,e){if(null==t)return{};var r,n,a=function(t,e){if(null==t)return{};var r,n,a={},i=Object.keys(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||(a[r]=t[r]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(a[r]=t[r])}return a}var p=n.createContext({}),s=function(t){var e=n.useContext(p),r=e;return t&&(r="function"==typeof t?t(e):l(l({},e),t)),r},c=function(t){var e=s(t.components);return n.createElement(p.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},m=n.forwardRef((function(t,e){var r=t.components,a=t.mdxType,i=t.originalType,p=t.parentName,c=o(t,["components","mdxType","originalType","parentName"]),m=s(r),g=a,f=m["".concat(p,".").concat(g)]||m[g]||u[g]||i;return r?n.createElement(f,l(l({ref:e},c),{},{components:r})):n.createElement(f,l({ref:e},c))}));function g(t,e){var r=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var i=r.length,l=new Array(i);l[0]=m;var o={};for(var p in e)hasOwnProperty.call(e,p)&&(o[p]=e[p]);o.originalType=t,o.mdxType="string"==typeof t?t:a,l[1]=o;for(var s=2;s<i;s++)l[s]=r[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},5988:(t,e,r)=>{r.r(e),r.d(e,{contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var n=r(3117),a=(r(7294),r(3905));const i={sidebar_label:"img_utils",title:"agentchat.contrib.img_utils"},l=void 0,o={unversionedId:"reference/agentchat/contrib/img_utils",id:"reference/agentchat/contrib/img_utils",isDocsHomePage:!1,title:"agentchat.contrib.img_utils",description:"llava\\_formatter",source:"@site/docs/reference/agentchat/contrib/img_utils.md",sourceDirName:"reference/agentchat/contrib",slug:"/reference/agentchat/contrib/img_utils",permalink:"/autogen/docs/reference/agentchat/contrib/img_utils",editUrl:"https://github.com/microsoft/autogen/edit/main/website/docs/reference/agentchat/contrib/img_utils.md",tags:[],version:"current",frontMatter:{sidebar_label:"img_utils",title:"agentchat.contrib.img_utils"},sidebar:"referenceSideBar",previous:{title:"gpt_assistant_agent",permalink:"/autogen/docs/reference/agentchat/contrib/gpt_assistant_agent"},next:{title:"llava_agent",permalink:"/autogen/docs/reference/agentchat/contrib/llava_agent"}},p=[{value:"llava_formatter",id:"llava_formatter",children:[],level:4},{value:"gpt4v_formatter",id:"gpt4v_formatter",children:[],level:4},{value:"extract_img_paths",id:"extract_img_paths",children:[],level:4}],s={toc:p};function c(t){let{components:e,...r}=t;return(0,a.kt)("wrapper",(0,n.Z)({},s,r,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"llava_formatter"},"llava","_","formatter"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def llava_formatter(prompt: str,\n                    order_image_tokens: bool = False) -> Tuple[str, List[str]]\n")),(0,a.kt)("p",null,"Formats the input prompt by replacing image tags and returns the new prompt along with image locations."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"prompt (str): The input string that may contain image tags like <img ...>."),(0,a.kt)("li",{parentName:"ul"},"order_image_tokens (bool, optional): Whether to order the image tokens with numbers.\nIt will be useful for GPT-4V. Defaults to False.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Tuple[str, List","[str]","]: A tuple containing the formatted string and a list of images (loaded in b64 format).")),(0,a.kt)("h4",{id:"gpt4v_formatter"},"gpt4v","_","formatter"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def gpt4v_formatter(prompt: str) -> List[Union[str, dict]]\n")),(0,a.kt)("p",null,"Formats the input prompt by replacing image tags and returns a list of text and images."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"prompt (str): The input string that may contain image tags like <img ...>.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"List[Union","[str, dict]","]: A list of alternating text and image dictionary items.")),(0,a.kt)("h4",{id:"extract_img_paths"},"extract","_","img","_","paths"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def extract_img_paths(paragraph: str) -> list\n")),(0,a.kt)("p",null,"Extract image paths (URLs or local paths) from a text paragraph."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"paragraph")," ",(0,a.kt)("em",{parentName:"li"},"str")," - The input text paragraph.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"list")," - A list of extracted image paths.")))}c.isMDXComponent=!0}}]);