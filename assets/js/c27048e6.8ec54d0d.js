"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[822],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>d});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},m=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=c(a),d=r,_=u["".concat(s,".").concat(d)]||u[d]||p[d]||l;return a?n.createElement(_,o(o({ref:t},m),{},{components:a})):n.createElement(_,o({ref:t},m))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var c=2;c<l;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},3591:(e,t,a)=>{a.r(t),a.d(t,{contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var n=a(3117),r=(a(7294),a(3905));const l={sidebar_label:"teachable_agent",title:"agentchat.contrib.teachable_agent"},o=void 0,i={unversionedId:"reference/agentchat/contrib/teachable_agent",id:"reference/agentchat/contrib/teachable_agent",isDocsHomePage:!1,title:"agentchat.contrib.teachable_agent",description:"TeachableAgent Objects",source:"@site/docs/reference/agentchat/contrib/teachable_agent.md",sourceDirName:"reference/agentchat/contrib",slug:"/reference/agentchat/contrib/teachable_agent",permalink:"/autogen/docs/reference/agentchat/contrib/teachable_agent",editUrl:"https://github.com/microsoft/autogen/edit/main/website/docs/reference/agentchat/contrib/teachable_agent.md",tags:[],version:"current",frontMatter:{sidebar_label:"teachable_agent",title:"agentchat.contrib.teachable_agent"},sidebar:"referenceSideBar",previous:{title:"retrieve_user_proxy_agent",permalink:"/autogen/docs/reference/agentchat/contrib/retrieve_user_proxy_agent"},next:{title:"text_analyzer_agent",permalink:"/autogen/docs/reference/agentchat/contrib/text_analyzer_agent"}},s=[{value:"TeachableAgent Objects",id:"teachableagent-objects",children:[{value:"__init__",id:"__init__",children:[],level:4},{value:"close_db",id:"close_db",children:[],level:4},{value:"prepopulate_db",id:"prepopulate_db",children:[],level:4},{value:"learn_from_user_feedback",id:"learn_from_user_feedback",children:[],level:4},{value:"consider_memo_storage",id:"consider_memo_storage",children:[],level:4},{value:"consider_memo_retrieval",id:"consider_memo_retrieval",children:[],level:4},{value:"retrieve_relevant_memos",id:"retrieve_relevant_memos",children:[],level:4},{value:"concatenate_memo_texts",id:"concatenate_memo_texts",children:[],level:4},{value:"analyze",id:"analyze",children:[],level:4}],level:2},{value:"MemoStore Objects",id:"memostore-objects",children:[{value:"__init__",id:"__init__-1",children:[],level:4},{value:"list_memos",id:"list_memos",children:[],level:4},{value:"close",id:"close",children:[],level:4},{value:"reset_db",id:"reset_db",children:[],level:4},{value:"add_input_output_pair",id:"add_input_output_pair",children:[],level:4},{value:"get_nearest_memo",id:"get_nearest_memo",children:[],level:4},{value:"get_related_memos",id:"get_related_memos",children:[],level:4},{value:"prepopulate",id:"prepopulate",children:[],level:4}],level:2}],c={toc:s};function m(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"teachableagent-objects"},"TeachableAgent Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class TeachableAgent(ConversableAgent)\n")),(0,r.kt)("p",null,"(Experimental) Teachable Agent, a subclass of ConversableAgent using a vector database to remember user teachings.\nIn this class, the term 'user' refers to any caller (human or not) sending messages to this agent.\nNot yet tested in the group-chat setting."),(0,r.kt)("h4",{id:"__init__"},"_","_","init","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def __init__(\n        name="teachableagent",\n        system_message:\n    Optional[\n        str] = "You are a helpful AI assistant that remembers user teachings from prior chats.",\n        human_input_mode: Optional[str] = "NEVER",\n        llm_config: Optional[Union[Dict, bool]] = None,\n        analyzer_llm_config: Optional[Union[Dict, bool]] = None,\n        teach_config: Optional[Dict] = None,\n        **kwargs)\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name")," ",(0,r.kt)("em",{parentName:"li"},"str")," - name of the agent."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"system_message")," ",(0,r.kt)("em",{parentName:"li"},"str")," - system message for the ChatCompletion inference."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"human_input_mode")," ",(0,r.kt)("em",{parentName:"li"},"str")," - This agent should NEVER prompt the human for input."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"llm_config")," ",(0,r.kt)("em",{parentName:"li"},"dict or False")," - llm inference configuration.\nPlease refer to ",(0,r.kt)("a",{parentName:"li",href:"/docs/reference/oai/client#create"},"OpenAIWrapper.create"),"\nfor available options.\nTo disable llm-based auto reply, set to False."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"analyzer_llm_config")," ",(0,r.kt)("em",{parentName:"li"},"dict or False")," - llm inference configuration passed to TextAnalyzerAgent.\nGiven the default setting of None, TeachableAgent passes its own llm_config to TextAnalyzerAgent."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"teach_config")," ",(0,r.kt)("em",{parentName:"li"},"dict or None")," - Additional parameters used by TeachableAgent.\nTo use default config, set to None. Otherwise, set to a dictionary with any of the following keys:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"verbosity (Optional, int): # 0 (default) for basic info, 1 to add memory operations, 2 for analyzer messages, 3 for memo lists."),(0,r.kt)("li",{parentName:"ul"},"reset_db (Optional, bool): True to clear the DB before starting. Default False."),(0,r.kt)("li",{parentName:"ul"},'path_to_db_dir (Optional, str): path to the directory where the DB is stored. Default "./tmp/teachable_agent_db"'),(0,r.kt)("li",{parentName:"ul"},"prepopulate (Optional, int): True (default) to prepopulate the DB with a set of input-output pairs."),(0,r.kt)("li",{parentName:"ul"},"recall_threshold (Optional, float): The maximum distance for retrieved memos, where 0.0 is exact match. Default 1.5. Larger values allow more (but less relevant) memos to be recalled."),(0,r.kt)("li",{parentName:"ul"},"max_num_retrievals (Optional, int): The maximum number of memos to retrieve from the DB. Default 10."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"**kwargs")," ",(0,r.kt)("em",{parentName:"li"},"dict")," - other kwargs in ",(0,r.kt)("a",{parentName:"li",href:"../conversable_agent#__init__"},"ConversableAgent"),".")),(0,r.kt)("h4",{id:"close_db"},"close","_","db"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def close_db()\n")),(0,r.kt)("p",null,"Cleanly closes the memo store."),(0,r.kt)("h4",{id:"prepopulate_db"},"prepopulate","_","db"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def prepopulate_db()\n")),(0,r.kt)("p",null,"Adds a few arbitrary memos to the DB."),(0,r.kt)("h4",{id:"learn_from_user_feedback"},"learn","_","from","_","user","_","feedback"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def learn_from_user_feedback()\n")),(0,r.kt)("p",null,"Reviews the user comments from the last chat, and decides what teachings to store as memos."),(0,r.kt)("h4",{id:"consider_memo_storage"},"consider","_","memo","_","storage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def consider_memo_storage(comment)\n")),(0,r.kt)("p",null,"Decides whether to store something from one user comment in the DB."),(0,r.kt)("h4",{id:"consider_memo_retrieval"},"consider","_","memo","_","retrieval"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def consider_memo_retrieval(comment)\n")),(0,r.kt)("p",null,"Decides whether to retrieve memos from the DB, and add them to the chat context."),(0,r.kt)("h4",{id:"retrieve_relevant_memos"},"retrieve","_","relevant","_","memos"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def retrieve_relevant_memos(input_text)\n")),(0,r.kt)("p",null,"Returns semantically related memos from the DB."),(0,r.kt)("h4",{id:"concatenate_memo_texts"},"concatenate","_","memo","_","texts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def concatenate_memo_texts(memo_list)\n")),(0,r.kt)("p",null,"Concatenates the memo texts into a single string for inclusion in the chat context."),(0,r.kt)("h4",{id:"analyze"},"analyze"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def analyze(text_to_analyze, analysis_instructions)\n")),(0,r.kt)("p",null,"Asks TextAnalyzerAgent to analyze the given text according to specific instructions."),(0,r.kt)("h2",{id:"memostore-objects"},"MemoStore Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class MemoStore()\n")),(0,r.kt)("p",null,"(Experimental)\nProvides memory storage and retrieval for a TeachableAgent, using a vector database.\nEach DB entry (called a memo) is a pair of strings: an input text and an output text.\nThe input text might be a question, or a task to perform.\nThe output text might be an answer to the question, or advice on how to perform the task.\nVector embeddings are currently supplied by Chroma's default Sentence Transformers."),(0,r.kt)("h4",{id:"__init__-1"},"_","_","init","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(verbosity, reset, path_to_db_dir)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"verbosity (Optional, int): 1 to print memory operations, 0 to omit them. 3+ to print memo lists."),(0,r.kt)("li",{parentName:"ul"},"path_to_db_dir (Optional, str): path to the directory where the DB is stored.")),(0,r.kt)("h4",{id:"list_memos"},"list","_","memos"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def list_memos()\n")),(0,r.kt)("p",null,"Prints the contents of MemoStore."),(0,r.kt)("h4",{id:"close"},"close"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def close()\n")),(0,r.kt)("p",null,"Saves self.uid_text_dict to disk."),(0,r.kt)("h4",{id:"reset_db"},"reset","_","db"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def reset_db()\n")),(0,r.kt)("p",null,"Forces immediate deletion of the DB's contents, in memory and on disk."),(0,r.kt)("h4",{id:"add_input_output_pair"},"add","_","input","_","output","_","pair"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def add_input_output_pair(input_text, output_text)\n")),(0,r.kt)("p",null,"Adds an input-output pair to the vector DB."),(0,r.kt)("h4",{id:"get_nearest_memo"},"get","_","nearest","_","memo"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def get_nearest_memo(query_text)\n")),(0,r.kt)("p",null,"Retrieves the nearest memo to the given query text."),(0,r.kt)("h4",{id:"get_related_memos"},"get","_","related","_","memos"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def get_related_memos(query_text, n_results, threshold)\n")),(0,r.kt)("p",null,"Retrieves memos that are related to the given query text within the specified distance threshold."),(0,r.kt)("h4",{id:"prepopulate"},"prepopulate"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def prepopulate()\n")),(0,r.kt)("p",null,"Adds a few arbitrary examples to the vector DB, just to make retrieval less trivial."))}m.isMDXComponent=!0}}]);