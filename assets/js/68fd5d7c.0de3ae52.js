"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[456],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var a=r.createContext({}),c=function(e){var t=r.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(a.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,a=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),m=c(n),f=o,k=m["".concat(a,".").concat(f)]||m[f]||p[f]||l;return n?r.createElement(k,i(i({ref:t},s),{},{components:n})):r.createElement(k,i({ref:t},s))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,i=new Array(l);i[0]=m;var u={};for(var a in t)hasOwnProperty.call(t,a)&&(u[a]=t[a]);u.originalType=e,u.mdxType="string"==typeof e?e:o,i[1]=u;for(var c=2;c<l;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8596:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>i,default:()=>s,frontMatter:()=>l,metadata:()=>u,toc:()=>a});var r=n(3117),o=(n(7294),n(3905));const l={sidebar_label:"token_count_utils",title:"token_count_utils"},i=void 0,u={unversionedId:"reference/token_count_utils",id:"reference/token_count_utils",isDocsHomePage:!1,title:"token_count_utils",description:"token\\_left",source:"@site/docs/reference/token_count_utils.md",sourceDirName:"reference",slug:"/reference/token_count_utils",permalink:"/autogen/docs/reference/token_count_utils",editUrl:"https://github.com/microsoft/autogen/edit/main/website/docs/reference/token_count_utils.md",tags:[],version:"current",frontMatter:{sidebar_label:"token_count_utils",title:"token_count_utils"},sidebar:"referenceSideBar",previous:{title:"retrieve_utils",permalink:"/autogen/docs/reference/retrieve_utils"}},a=[{value:"token_left",id:"token_left",children:[],level:4},{value:"count_token",id:"count_token",children:[],level:4},{value:"num_tokens_from_functions",id:"num_tokens_from_functions",children:[],level:4}],c={toc:a};function s(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h4",{id:"token_left"},"token","_","left"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'def token_left(input: Union[str, List, Dict],\n               model="gpt-3.5-turbo-0613") -> int\n')),(0,o.kt)("p",null,"Count number of tokens left for an OpenAI model."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"input")," - (str, list, dict): Input to the model."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"model")," - (str): Model name.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"int")," - Number of tokens left that the model can use for completion.")),(0,o.kt)("h4",{id:"count_token"},"count","_","token"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'def count_token(input: Union[str, List, Dict],\n                model: str = "gpt-3.5-turbo-0613") -> int\n')),(0,o.kt)("p",null,"Count number of tokens used by an OpenAI model."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"input")," - (str, list, dict): Input to the model."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"model")," - (str): Model name.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"int")," - Number of tokens from the input.")),(0,o.kt)("h4",{id:"num_tokens_from_functions"},"num","_","tokens","_","from","_","functions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'def num_tokens_from_functions(functions, model="gpt-3.5-turbo-0613") -> int\n')),(0,o.kt)("p",null,"Return the number of tokens used by a list of functions."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"functions")," - (list): List of function descriptions that will be passed in model."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"model")," - (str): Model name.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"int")," - Number of tokens from the function descriptions.")))}s.isMDXComponent=!0}}]);