"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2490],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=c(n),g=a,d=u["".concat(s,".").concat(g)]||u[g]||p[g]||o;return n?r.createElement(d,l(l({ref:t},m),{},{components:n})):r.createElement(d,l({ref:t},m))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4307:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var r=n(3117),a=(n(7294),n(3905));const o={sidebar_label:"multimodal_conversable_agent",title:"agentchat.contrib.multimodal_conversable_agent"},l=void 0,i={unversionedId:"reference/agentchat/contrib/multimodal_conversable_agent",id:"reference/agentchat/contrib/multimodal_conversable_agent",isDocsHomePage:!1,title:"agentchat.contrib.multimodal_conversable_agent",description:"MultimodalConversableAgent Objects",source:"@site/docs/reference/agentchat/contrib/multimodal_conversable_agent.md",sourceDirName:"reference/agentchat/contrib",slug:"/reference/agentchat/contrib/multimodal_conversable_agent",permalink:"/autogen/docs/reference/agentchat/contrib/multimodal_conversable_agent",editUrl:"https://github.com/microsoft/autogen/edit/main/website/docs/reference/agentchat/contrib/multimodal_conversable_agent.md",tags:[],version:"current",frontMatter:{sidebar_label:"multimodal_conversable_agent",title:"agentchat.contrib.multimodal_conversable_agent"},sidebar:"referenceSideBar",previous:{title:"math_user_proxy_agent",permalink:"/autogen/docs/reference/agentchat/contrib/math_user_proxy_agent"},next:{title:"qdrant_retrieve_user_proxy_agent",permalink:"/autogen/docs/reference/agentchat/contrib/qdrant_retrieve_user_proxy_agent"}},s=[{value:"MultimodalConversableAgent Objects",id:"multimodalconversableagent-objects",children:[{value:"__init__",id:"__init__",children:[],level:4},{value:"update_system_message",id:"update_system_message",children:[],level:4}],level:2}],c={toc:s};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"multimodalconversableagent-objects"},"MultimodalConversableAgent Objects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class MultimodalConversableAgent(ConversableAgent)\n")),(0,a.kt)("h4",{id:"__init__"},"_","_","init","_","_"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(name: str,\n             system_message: Optional[Union[str, List]] = DEFAULT_LMM_SYS_MSG,\n             is_termination_msg: str = None,\n             *args,\n             **kwargs)\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"name")," ",(0,a.kt)("em",{parentName:"li"},"str")," - agent name."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"system_message")," ",(0,a.kt)("em",{parentName:"li"},"str")," - system message for the OpenAIWrapper inference.\nPlease override this attribute if you want to reprogram the agent."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"**kwargs")," ",(0,a.kt)("em",{parentName:"li"},"dict")," - Please refer to other kwargs in\n",(0,a.kt)("a",{parentName:"li",href:"../conversable_agent#__init__"},"ConversableAgent"),".")),(0,a.kt)("h4",{id:"update_system_message"},"update","_","system","_","message"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def update_system_message(system_message: Union[Dict, List, str])\n")),(0,a.kt)("p",null,"Update the system message."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"system_message")," ",(0,a.kt)("em",{parentName:"li"},"str")," - system message for the OpenAIWrapper inference.")))}m.isMDXComponent=!0}}]);